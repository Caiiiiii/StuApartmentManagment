package MySql;import java.sql.PreparedStatement;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import Bean.DromBean;import Bean.EletricBean;import Bean.StuBena;public class DbControl {	DBacess db = new DBacess();		public boolean Login(String userName ,String passWord ){        //登录验证			if(userName==null||userName.equals(""))return false;			db.createConn();			String sql="select * from userinfo where username= '"+userName+"' ";			db.query(sql);			if(db.next()){				return (passWord.equals(db.getValue("password")))?true:false;			}else{				return false;			}		}				public int  Identity(String userName){                 //人员身份				db.createConn();				String sql = "select * from userinfo where username ='"+userName+"' ";				db.query(sql);				if(db.next()){					return Integer.valueOf(db.getValue("identity"));				}				else{				return 0;				}			}				public List<StuBena> stuNameInfo(String stuName){            //根据姓名查询				db.createConn();				List<StuBena> list = new ArrayList();				String sql ="select * from stuinfo where stuName ='"+stuName+"'";				db.query(sql);				while(db.next()){					StuBena sb = new StuBena();					sb.setStuName(stuName);					sb.setStuSex(db.getValue("stuSex"));					sb.setSutClass(db.getValue("stuClass"));					sb.setStuDromNo(db.getValue("stuDromNo"));					sb.setStuNo(Integer.valueOf(db.getValue("stuNo")));					list.add(sb);				}								return (list.size()>=1)?list:null;		}				public List<DromBean> drominfo(String dromNo){        //根据宿舍号查询			db.createConn();			List<DromBean> list = new ArrayList();			String sql = "select * from drominfo where dromNo ='"+dromNo+"'";			db.query(sql);			if(db.next()){				DromBean dbean = new DromBean();				dbean.setBuilding(db.getValue("Building"));				dbean.setFloor(db.getValue("floor"));				dbean.setRoom(db.getValue("room"));				dbean.setDromNo(dromNo);				int hadCheckIn = 4 - Integer.valueOf(db.getValue("freeSlot"));				dbean.setFreeSlot(hadCheckIn);				list.add(dbean);			}			return (list.size()>=1)?list:null;		}				public List<StuBena> stuNoInfo(int stuNo){            //根据学号查询			db.createConn();			List<StuBena> list = new ArrayList();			String sql ="select * from stuinfo where stuNo ="+stuNo;			db.query(sql);			while(db.next()){				StuBena sb = new StuBena();				sb.setStuNo(stuNo);				sb.setStuSex(db.getValue("stuSex"));				sb.setSutClass(db.getValue("stuClass"));				sb.setStuDromNo(db.getValue("stuDromNo"));				sb.setStuName(db.getValue("stuName"));				list.add(sb);			}				db.closeRs();			db.closeStm();			db.closeConn();			return (list.size()>=1)?list:null;	}				public boolean hadThisMan(String stuNo){                //判断该学号是否被注册			db.createConn();			String sql = "select * from stuinfo where stuNo ="+Integer.valueOf(stuNo);			db.query(sql);			if(db.next()){				return true;			}			return false;		}				public boolean hadThisRoom(String DromNo){                //判断该宿舍是否存在			db.createConn();			String sql = "select * from drominfo where dromNo ='"+DromNo+"'";			db.query(sql);			if(db.next()){				return true;			}			return false;		}				public String SlotIsFull(String DromNo){                    //判断是否有这个宿舍且是否有空位			db.createConn();			String sql = "select * from drominfo where dromNo ='"+DromNo+"'";			db.query(sql);			if(db.next()){					if(Integer.valueOf(db.getValue("freeSlot"))!=0){						return "haveSlot";					}else{						return "haventSlot";					}			}else{				return "haventDrom";			}		}				public boolean stuAdd(StuBena sb){                              //添加学生			db.createConn();			String sql = "insert into stuinfo(stuNo,stuName,stuSex,stuClass,stuDromNo) values(?,?,?,?,?)";			try {				PreparedStatement ps =db.add(sql);				ps.setInt(1, sb.getStuNo());				ps.setString(2, sb.getStuName());				ps.setString(3, sb.getStuSex());				ps.setString(4, sb.getSutClass());				ps.setString(5, sb.getStuDromNo());				ps.execute();				ps.close();				return true;			} catch (SQLException e) {				// TODO 自动生成的 catch 块				e.printStackTrace();			}			return false;			}				public boolean addDrom(DromBean Db ){              //添加宿舍			db.createConn();			String sql = "insert into drominfo(dromNo,Building,floor,room,freeSlot) values(?,?,?,?,?)";						try {				PreparedStatement ps =db.add(sql);				ps.setString(1, Db.getDromNo());				ps.setString(2, Db.getBuilding());				ps.setString(3, Db.getFloor());				ps.setString(4, Db.getRoom());				ps.setInt(5, 4);				ps.execute();				ps.close();				return true;							} catch (SQLException e) {				// TODO 自动生成的 catch 块				e.printStackTrace();			}			return false;		}				public void reduceSlot(String dromNo){                //宿舍剩余人数减1			db.createConn();			int freeSlot = 0;			String sql = "select * from drominfo where dromNo ='"+dromNo+"'";			db.query(sql);			if(db.next()){				 freeSlot = Integer.valueOf(db.getValue("freeSlot")) - 1;				}					db.closeStm();			db.closeRs();						String newSql = "update drominfo set freeSlot ="+freeSlot+" where dromNo ='"+dromNo+"'";			db.update(newSql);		}				public String stuInDromNo(String stuNo){					//学生所在的宿舍			db.createConn();			String sql = "select * from stuinfo where stuNo ="+Integer.valueOf(stuNo);			db.query(sql);			if(db.next()){				return db.getValue("stuDromNo");			}else{				return null ;			}		}				public void AddSlot(String dromNo){                //宿舍剩余人数加1			db.createConn();			int freeSlot = 0;			String sql = "select * from drominfo where dromNo ='"+dromNo+"'";			db.query(sql);			if(db.next()){				 freeSlot = Integer.valueOf(db.getValue("freeSlot")) + 1;				}					db.closeStm();			db.closeRs();						String newSql = "update drominfo set freeSlot ="+freeSlot+" where dromNo ='"+dromNo+"'";			db.update(newSql);		}				public void deleteStu(String stuNo){					//删除学生			db.createConn();			String sql ="delete from stuinfo where stuNo="+Integer.valueOf(stuNo);			db.update(sql);		}				public void deleteDrom(String DromNo){                 //删除宿舍			db.createConn();			String sql ="delete from drominfo where dromNo='"+DromNo+"'";			db.update(sql);		}				public boolean updateStu(StuBena sb){                //更新学生宿舍			db.createConn();			String sql = "update stuinfo set stuName=?,stuSex=?,stuClass=?,stuDromNo=? where stuNo=?";			try {				PreparedStatement ps =db.add(sql);				ps.setString(1,sb.getStuName());				ps.setString(2, sb.getStuSex());				ps.setString(3, sb.getSutClass());				ps.setString(4, sb.getStuDromNo());				ps.setInt(5, sb.getStuNo());				ps.execute();				ps.close();				return true;			} catch (SQLException e) {				// TODO 自动生成的 catch 块				e.printStackTrace();			}			return false;		}				public void changeDrom(String stuNo,String dromNo){                   //调寝 			db.createConn();			String sql = "update stuinfo set stuDromNo ='"+dromNo+"' where stuNo ="+Integer.valueOf(stuNo);			db.update(sql);					}				public List<String> stuLiveDrom(String DromNo){           //住在某宿舍的所有成员			List<String> list = new ArrayList();			db.createConn();			String sql = "select * from stuinfo where stuDromNo = '"+ DromNo+"'";			db.query(sql);			while(db.next()){				list.add(db.getValue("stuNo"));			}			return (list.size()>=1)?list:null;		}				public void backDrom(String stuNo){                   //退寝 			db.createConn();			String sql = "update stuinfo set stuDromNo ='' where stuNo ="+Integer.valueOf(stuNo);			db.update(sql);		}				public void addElectricTable (String dromNo,String building){               //电费表单增加宿舍			db.createConn();			String sql = "insert into electricinfo(dromNo,building) values (?,?)";			PreparedStatement ps =db.add(sql);			try {				ps.setString(1,dromNo);				ps.setString(2, building);				ps.execute();				ps.close();			} catch (SQLException e) {				// TODO 自动生成的 catch 块				e.printStackTrace();			}		}				public void deleteElectricTable (String dromNo){            //电费表单减少宿舍			db.createConn();			String sql = "delete from electricinfo where dromNo='"+dromNo+"'";			db.update(sql);		}				public List<EletricBean> buildingEletricInfo(String building){            //根据楼查询			db.createConn();			List<EletricBean> list = new ArrayList();						String sql = "select * from electricinfo where building='"+building+"'";			db.query(sql);			while(db.next()){				System.out.print(db.getValue("dromNo"));				EletricBean eb = new EletricBean();				eb.setDromNo(db.getValue("dromNo"));				eb.setYearIn2017(db.getValue("yearIn2017"));				eb.setYearIn2018(db.getValue("yearIn2018"));				list.add(eb);			}			return (list.size()>=1)?list:null;		}				public List<EletricBean> dromNoEletricInfo(String dromNo){            //根据宿舍号查询			db.createConn();			List<EletricBean> list = new ArrayList();						String sql = "select * from electricinfo where dromNo='"+dromNo+"'";			db.query(sql);			while(db.next()){				EletricBean eb = new EletricBean();				eb.setDromNo(db.getValue("dromNo"));				eb.setYearIn2017(db.getValue("yearIn2017"));				eb.setYearIn2018(db.getValue("yearIn2018"));				list.add(eb);			}			return (list.size()>=1)?list:null;		}				public void addFare2017(String dromNo,String Fare){                     //增加 2017 电费			db.createConn();				String sql = "update electricinfo set yearIn2017 ='"+Fare+"' where dromNo='"+dromNo+"'";			db.update(sql);		}				public void addFare2018(String dromNo,String Fare){                     //增加 2018 电费			db.createConn();				String sql = "update electricinfo set yearIn2018 ='"+Fare+"' where dromNo='"+dromNo+"'";			db.update(sql);		}				public void delFare2017(String dromNo){                  //删除2017电费			db.createConn();			String sql = "update electricinfo set yearIn2017='' where dromNo='"+dromNo+"'";			db.update(sql);		}				public void delFare2018(String dromNo){                      //删除2018电费			db.createConn();			String sql = "update electricinfo set yearIn2018='' where dromNo='"+dromNo+"'";			db.update(sql);		}}